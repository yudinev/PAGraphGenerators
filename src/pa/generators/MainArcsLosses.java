package pa.generators;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

import org.apache.commons.collections15.Factory;

import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.graph.UndirectedSparseMultigraph;

public class MainArcsLosses {
	static PrefferentialAttachment pa_losses = new PrefferentialAttachment() {
		double[] d = { 0, 0.08389, 0.15189, 0.76084, 1.75237, 2.52761, 3.58480, 4.25984, 4.55060, 5.43441, 5.71515,
				5.92737, 7.25874, 8.18102, 8.51582, 8.80600, 9.05120, 9.25108, 10.06957, 10.62987, 17.84032

		};

		@Override
		public double f(int k) {
			if (d.length > k)
				return d[k];

			return 0.89202 * k;

		}

		
	};

	static PrefferentialAttachment pa = new PrefferentialAttachment() {

		double[] d = {
				/*
				 * 1.104770796 ,2.704346953 ,0.706042165 ,0.630352901
				 * ,0.492928131 ,0.402261286 ,0.338668864 ,0.292073422
				 * ,0.257436809 ,0.23496844 ,0.243105529 ,0.406371713
				 * ,1.552538574 ,9.534568245 ,69.04670431 ,272.6338317
				 * ,774.1044696 ,1771.745304 ,3479.623357 ,6098.396226
				 * ,9794.850116 ,14692.76629 ,20873.01138 ,28379.12158
				 * ,37225.07687 ,47403.1107 ,58890.4733 ,71654.79396
				 * ,85658.08373 ,100859.589 ,117217.7462 ,134691.4694
				 * ,153240.9576 ,172828.1697 ,193417.0703 ,214973.7265
				 * ,237466.3062 ,260865.0162 ,285142.005 ,310271.2469
				 * ,336228.4182 ,362990.7722 ,390537.0179 ,418847.2052
				 * ,447902.6167 ,477685.6676 ,508179.8141 ,539369.469
				 * ,571239.9249 ,603777.2846 ,636968.397 ,670800.8 ,705262.6677
				 * ,740342.7628 ,776030.3934 ,812315.3735 ,849187.9871
				 * ,886638.9557 ,924659.4081 ,963240.8535 ,1002375.156
				 * ,1042054.513 ,1082271.433 ,1123018.715 ,1164289.435
				 * ,1206076.926 ,1248374.763 ,1291176.751 ,1334476.913
				 * ,1378269.473 ,1422548.85 ,1467309.646 ,1512546.637
				 * ,1558254.762 ,1604429.118 ,1651064.949 ,1698157.642
				 * ,1745702.717 ,1793695.823 ,1842132.731 ,1891009.331
				 * ,1940321.622 ,1990065.71 ,2040237.804 ,2090834.212
				 * ,2141851.332 ,2193285.656 ,2245133.759 ,2297392.301
				 * ,2350058.02 ,2403127.731 ,2456598.323 ,2510466.754
				 * ,2564730.053 ,2619385.312 ,2674429.688 ,2729860.397
				 * ,2785674.715 ,2841869.976 ,2898443.568 ,2955392.931
				 * ,3012715.557 ,3070408.988 ,3128470.814 ,3186898.67
				 * ,3245690.238 ,3304843.243 ,3364355.45 ,3424224.669
				 * ,3484448.746 ,3545025.567 ,3605953.056 ,3667229.172
				 * ,3728851.911 ,3790819.301 ,3853129.405 ,3915780.318
				 * ,3978770.165 ,4042097.104 ,4105759.321 ,4169755.033
				 * ,4234082.482 ,4298739.94 ,4363725.705 ,4429038.102
				 * ,4494675.48 ,4560636.214 ,4626918.702 ,4693521.367
				 * ,4760442.653 ,4827681.029 ,4895234.984 ,4963103.029
				 * ,5031283.697 ,5099775.538 ,5168577.127 ,5237687.055
				 * ,5307103.932 ,5376826.389 ,5446853.073 ,5517182.65
				 * ,5587813.802 ,5658745.23 ,5729975.651 ,5801503.798
				 * ,5873328.42 ,5945448.282 ,6017862.164 ,6090568.861
				 * ,6163567.184 ,6236855.956 ,6310434.016 ,6384300.217
				 * ,6458453.425 ,6532892.519 ,6607616.391 ,6682623.946
				 * ,6757914.102 ,6833485.79 ,6909337.952 ,6985469.541
				 * ,7061879.523 ,7138566.876 ,7215530.588 ,7292769.658
				 * ,7370283.098 ,7448069.926 ,7526129.176 ,7604459.889
				 * ,7683061.116 ,7761931.92 ,7841071.371 ,7920478.55
				 * ,8000152.549 ,8080092.466 ,8160297.411 ,8240766.5
				 * ,8321498.862 ,8402493.63 ,8483749.949 ,8565266.97
				 * ,8647043.854 ,8729079.77 ,8811373.893 ,8893925.408
				 * ,8976733.507 ,9059797.389 ,9143116.261 ,9226689.339
				 * ,9310515.843 ,9394595.002 ,9478926.053 ,9563508.238
				 * ,9648340.806 ,9733423.015 ,9818754.126 ,9904333.41
				 * ,9990160.142 ,10076233.6 ,10162553.09 ,10249117.88
				 * ,10335927.29 ,10422980.62 ,10510277.19 ,10597816.31
				 * ,10685597.3 ,10773619.5 ,10861882.24 ,10950384.87
				 * ,11039126.72 ,11128107.15 ,11217325.52 ,11306781.19
				 * ,11396473.53 ,11486401.9 ,11576565.69 ,11666964.28
				 * ,11757597.05 ,11848463.4 ,11939562.73 ,12030894.43
				 * ,12122457.91 ,12214252.58 ,12306277.86 ,12398533.17
				 * ,12491017.93 ,12583731.57 ,12676673.51 ,12769843.21
				 * ,12863240.09 ,12956863.61 ,13050713.22 ,13144788.36
				 * ,13239088.49 ,13333613.08 ,13428361.6 ,13523333.5
				 * ,13618528.27 ,13713945.37 ,13809584.3 ,13905444.54
				 * ,14001525.56 ,14097826.88 ,14194347.97 ,14291088.34
				 * ,14388047.5 ,14485224.94 ,14582620.18 ,14680232.73
				 * ,14778062.11 ,14876107.84 ,14974369.43 ,15072846.42
				 * ,15171538.34 ,15270444.71 ,15369565.08 ,15468898.98
				 * ,15568445.96 ,15668205.57 ,15768177.34 ,15868360.84
				 * ,15968755.62 ,16069361.23 ,16170177.25 ,16271203.22
				 * ,16372438.73 ,16473883.34 ,16575536.62 ,16677398.15
				 * ,16779467.51 ,16881744.28 ,16984228.04 ,17086918.39
				 * ,17189814.91 ,17292917.2 ,17396224.85 ,17499737.45
				 * ,17603454.62 ,17707375.96 ,17811501.07 ,17915829.56
				 * ,18020361.04 ,18125095.13 ,18230031.45 ,18335169.6
				 * ,18440509.23 ,18546049.94 ,18651791.37 ,18757733.14
				 * ,18863874.89 ,18970216.25 ,19076756.85 ,19183496.34
				 * ,19290434.36 ,19397570.53 ,19504904.52 ,19612435.97
				 * ,19720164.52 ,19828089.82 ,19936211.53 ,20044529.31
				 * ,20153042.8 ,20261751.66 ,20370655.56 ,20479754.15
				 * ,20589047.1 ,20698534.07 ,20808214.72 ,20918088.72
				 * ,21028155.75 ,21138415.46 ,21248867.53 ,21359511.63
				 * ,21470347.42 ,21581374.6 ,21692592.81 ,21804001.76
				 * ,21915601.09 ,22027390.5 ,22139369.66 ,22251538.24
				 * ,22363895.92 ,22476442.38 ,22589177.29 ,22702100.34
				 * ,22815211.19 ,22928509.53 ,23041995.03 ,23155667.36
				 * ,23269526.21 ,23383571.24 ,23497802.14 ,23612218.56
				 * ,23726820.2 ,23841606.71 ,23956577.77 ,24071733.05
				 * ,24187072.21 ,24302594.92 ,24418300.85 ,24534189.65 ,24650261
				 * ,24766514.54 ,24882949.94 ,24999566.86 ,25116364.94
				 * ,25233343.83 ,25350503.2 ,25467842.68 ,25585361.91
				 * ,25703060.55 ,25820938.22 ,25938994.57 ,26057229.22
				 * ,26175641.82 ,26294231.99 ,26412999.34 ,26531943.52
				 * ,26651064.12 ,26770360.78 ,26889833.1 ,27009480.69
				 * ,27129303.17 ,27249300.12 ,27369471.16 ,27489815.87
				 * ,27610333.86 ,27731024.71 ,27851888.01 ,27972923.34
				 * ,28094130.29 ,28215508.42 ,28337057.32 ,28458776.55
				 * ,28580665.69 ,28702724.29 ,28824951.92 ,28947348.13
				 * ,29069912.48 ,29192644.52 ,29315543.81 ,29438609.88
				 * ,29561842.28 ,29685240.56 ,29808804.25 ,29932532.88 ,30056426
				 * ,30180483.13 ,30304703.81 ,30429087.56 ,30553633.9
				 * ,30678342.36 ,30803212.47 ,30928243.75 ,31053435.71
				 * ,31178787.88 ,31304299.78 ,31429970.91 ,31555800.8
				 * ,31681788.97 ,31807934.93 ,31934238.19 ,32060698.28
				 * ,32187314.72 ,32314087.01 ,32441014.67 ,32568097.23
				 * ,32695334.21 ,32822725.12 ,32950269.5 ,33077966.85
				 * ,33205816.72 ,33333818.63 ,33461972.11 ,33590276.69
				 * ,33718731.91 ,33847337.31 ,33976092.43 ,34104996.82
				 * ,34234050.03 ,34363251.61 ,34492601.11 ,34622098.1
				 * ,34751742.15 ,34881532.82 ,35011469.69 ,35141552.34
				 * ,35271780.35 ,35402153.31 ,35532670.82 ,35663332.49
				 * ,35794137.91 ,35925086.7 ,36056178.48 ,36187412.88
				 * ,36318789.52 ,36450308.05 ,36581968.12 ,36713769.36
				 * ,36845711.44 ,36977794.04 ,37110016.81 ,37242379.45
				 * ,37374881.63 ,37507523.06 ,37640303.43 ,37773222.46
				 * ,37906279.87 ,38039475.38 ,38172808.72 ,38306279.64
				 * ,38439887.88 ,38573633.21 ,38707515.38 ,38841534.17
				 * ,38975689.36 ,39109980.74 ,39244408.1 ,39378971.26
				 * ,39513670.01 ,39648504.19 ,39783473.61 ,39918578.11
				 * ,40053817.54 ,40189191.74 ,40324700.58 ,40460343.91
				 * ,40596121.61 ,40732033.55 ,40868079.63 ,41004259.72
				 * ,41140573.74 ,41277021.59 ,41413603.17 ,41550318.4
				 * ,41687167.22 ,41824149.54 ,41961265.3 ,42098514.45
				 * ,42235896.92 ,42373412.66 ,42511061.64 ,42648843.8
				 * ,42786759.11 ,42924807.54 ,43062989.06 ,43201303.65
				 * ,43339751.27 ,43478331.9 ,43617045.54 ,43755892.17
				 * ,43894871.76 ,44033984.32 ,44173229.83 ,44312608.27
				 * ,44452119.65 ,44591763.96 ,44731541.18 ,44871451.31
				 * ,45011494.33 ,45151670.25 ,45291979.06 ,45432420.73
				 * ,45572995.25 ,45713702.62 ,45854542.82 ,45995515.81
				 * ,46136621.58 ,46277860.11 ,46419231.36 ,46560735.3
				 * ,46702371.89 ,46844141.08 ,46986042.84 ,47128077.1
				 * ,47270243.81 ,47412542.9 ,47554974.31 ,47697537.95
				 * ,47840233.75 ,47983061.61 ,48126021.44 ,48269113.13
				 * ,48412336.57 ,48555691.65 ,48699178.23 ,48842796.19
				 * ,48986545.37 ,49130425.62 ,49274436.78 ,49418578.68
				 * ,49562851.15 ,49707253.99 ,49851787.01 ,49996450 ,50141242.74
				 * ,50286165.01 ,50431216.56 ,50576397.16 ,50721706.55
				 * ,50867144.47 ,51012710.63 ,51158404.76 ,51304226.55
				 * ,51450175.71 ,51596251.92 ,51742454.85 ,51888784.18
				 * ,52035239.56 ,52181820.64 ,52328527.05 ,52475358.43
				 * ,52622314.4 ,52769394.57 ,52916598.54 ,53063925.92
				 * ,53211376.28 ,53358949.21 ,53506644.28 ,53654461.06
				 * ,53802399.1 ,53950457.97 ,54098637.2 ,54246936.34
				 * ,54395354.92 ,54543892.48 ,54692548.54 ,54841322.62
				 * ,54990214.25 ,55139222.94 ,55288348.2 ,55437589.54
				 * ,55586946.49 ,55736418.53 ,55886005.19 ,56035705.98
				 * ,56185520.4 ,56335447.96 ,56485488.18 ,56635640.58
				 * ,56785904.66 ,56936279.97 ,57086766.01 ,57237362.34
				 * ,57388068.47 ,57538883.97 ,57689808.38 ,57840841.26
				 * ,57991982.18 ,58143230.72 ,58294586.47 ,58446049.02
				 * ,58597617.99 ,58749292.99 ,58901073.67 ,59052959.68
				 * ,59204950.66 ,59357046.32 ,59509246.33 ,59661550.4
				 * ,59813958.28 ,59966469.7 ,60119084.42 ,60271802.24
				 * ,60424622.95 ,60577546.38 ,60730572.38 ,60883700.81
				 * ,61036931.56 ,61190264.55 ,61343699.72 ,61497237.03
				 * ,61650876.46 ,61804618.04 ,61958461.81 ,62112407.82
				 * ,62266456.19 ,62420607.02 ,62574860.48 ,62729216.75
				 * ,62883676.03 ,63038238.58 ,63192904.66 ,63347674.58
				 * ,63502548.67 ,63657527.3 ,63812610.87 ,63967799.82
				 * ,64123094.61 ,64278495.74 ,64434003.75 ,64589619.19
				 * ,64745342.68 ,64901174.85 ,65057116.37 ,65213167.94
				 * ,65369330.31 ,65525604.24 ,65681990.57 ,65838490.12
				 * ,65995103.78 ,66151832.47 ,66308677.14 ,66465638.77
				 * ,66622718.4 ,66779917.08 ,66937235.9 ,67094676 ,67252238.53
				 * ,67409924.69 ,67567735.72 ,67725672.89 ,67883737.49
				 * ,68041930.86 ,68200254.37 ,68358709.41 ,68517297.43
				 * ,68676019.89 ,68834878.28 ,68993874.14 ,69153009.03
				 * ,69312284.54 ,69471702.29 ,69631263.93 ,69790971.14
				 * ,69950825.63 ,70110829.14 ,70270983.43 ,70431290.29
				 * ,70591751.54 ,70752369.02 ,70913144.6 ,71074080.16
				 * ,71235177.63 ,71396438.93 ,71557866.04 ,71719460.92
				 * ,71881225.58 ,72043162.04 ,72205272.33 ,72367558.51
				 * ,72530022.67 ,72692666.87 ,72855493.24 ,73018503.9
				 * ,73181700.96 ,73345086.59 ,73508662.94 ,73672432.18
				 * ,73836396.49 ,74000558.06 ,74164919.09 ,74329481.77
				 * ,74494248.34 ,74659220.99 ,74824401.96 ,74989793.47
				 * ,75155397.75 ,75321217.02 ,75487253.53 ,75653509.5
				 * ,75819987.16 ,75986688.75 ,76153616.48 ,76320772.59
				 * ,76488159.28 ,76655778.78 ,76823633.29 ,76991725 ,77160056.11
				 * ,77328628.8 ,77497445.24 ,77666507.59 ,77835817.99
				 * ,78005378.59 ,78175191.51 ,78345258.84 ,78515582.69
				 * ,78686165.12 ,78857008.21 ,79028113.97 ,79199484.44
				 * ,79371121.62 ,79543027.49 ,79715204 ,79887653.09 ,80060376.67
				 * ,80233376.64 ,80406654.86 ,80580213.16 ,80754053.36
				 * ,80928177.25 ,81102586.57 ,81277283.07 ,81452268.43
				 * ,81627544.33 ,81803112.4 ,81978974.25 ,82155131.45
				 * ,82331585.54 ,82508338.04 ,82685390.39 ,82862744.06
				 * ,83040400.42 ,83218360.85 ,83396626.67 ,83575199.16
				 * ,83754079.57 ,83933269.12 ,84112768.95 ,84292580.21
				 * ,84472703.98 ,84653141.29 ,84833893.14 ,85014960.49
				 * ,85196344.25 ,85378045.28 ,85560064.39 ,85742402.37
				 * ,85925059.93 ,86108037.75 ,86291336.45 ,86474956.62
				 * ,86658898.78 ,86843163.41 ,87027750.94 ,87212661.73
				 * ,87397896.1 ,87583454.34 ,87769336.64 ,87955543.16
				 * ,88142074.02 ,88328929.24 ,88516108.84 ,88703612.72
				 * ,88891440.78 ,89079592.82 ,89268068.6 ,89456867.81
				 * ,89645990.08 ,89835435 ,90025202.06 ,90215290.72 ,90405700.35
				 * ,90596430.28 ,90787479.76 ,90978847.98 ,91170534.05
				 * ,91362537.03 ,91554855.91 ,91747489.6 ,91940436.96
				 * ,92133696.76 ,92327267.7 ,92521148.44 ,92715337.53
				 * ,92909833.47 ,93104634.68 ,93299739.5 ,93495146.21
				 * ,93690853.01 ,93886858.03 ,94083159.3 ,94279754.81
				 * ,94476642.45 ,94673820.03 ,94871285.3 ,95069035.92
				 * ,95267069.48 ,95465383.49 ,95663975.36 ,95862842.44
				 * ,96061982.01 ,96261391.25 ,96461067.27 ,96661007.1
				 * ,96861207.67 ,97061665.86 ,97262378.46 ,97463342.15
				 * ,97664553.58 ,97866009.27 ,98067705.69 ,98269639.23
				 * ,98471806.17 ,98674202.74 ,98876825.07 ,99079669.23
				 * ,99282731.19 ,99486006.86 ,99689492.06 ,99893182.52
				 * ,100097073.9 ,100301161.8 ,100505441.8 ,100709909.2
				 * ,100914559.5 ,101119387.9 ,101324389.7 ,101529559.9
				 * ,101734893.7 ,101940386.1 ,102146031.9 ,102351826.2
				 * ,102557763.6 ,102763838.9 ,102970046.9 ,103176382
				 * ,103382838.9 ,103589412.1 ,103796096 ,104002885 ,104209773.4
				 * ,104416755.5 ,104623825.7 ,104830978 ,105038206.6
				 * ,105245505.6 ,105452869.2 ,105660291.2 ,105867765.9
				 * ,106075287 ,106282848.6 ,106490444.6 ,106698068.9
				 * ,106905715.4 ,107113377.9 ,107321050.3 ,107528726.4
				 * ,107736400.1 ,107944065.1 ,108151715.4 ,108359344.8
				 * ,108566947.1 ,108774516.2 ,108982045.9 ,109189530.2
				 * ,109396962.8 ,109604337.9 ,109811649.3 ,110018891.1
				 * ,110226057.3 ,110433141.9 ,110640139.1 ,110847043.1
				 * ,111053848.1 ,111260548.4 ,111467138.3 ,111673612.3
				 * ,111879964.8 ,112086190.4 ,112292283.8 ,112498239.6
				 * ,112704052.7 ,112909718 ,113115230.4 ,113320585.2
				 * ,113525777.4 ,113730802.4 ,113935655.6 ,114140332.6
				 * ,114344829 ,114549140.6 ,114753263.3 ,114957193.2
				 * ,115160926.5 ,115364459.5 ,115567788.6 ,115770910.5
				 * ,115973821.9 ,116176519.9 ,116379001.4 ,116581263.8
				 * ,116783304.4 ,116985120.9 ,117186711 ,117388072.6
				 * ,117589203.9 ,117790103.2 ,117990769 ,118191199.8
				 * ,118391394.7 ,118591352.7 ,118791072.9 ,118990555
				 * ,119189798.5 ,119388803.2 ,119587569.3 ,119786097
				 * ,119984386.8 ,120182439.4 ,120380255.6 ,120577836.5
				 * ,120775183.5 ,120972298.1 ,121169182.1 ,121365837.3
				 * ,121562265.9 ,121758470.4 ,121954453.3 ,122150217.4
				 * ,122345765.7 ,122541101.5 ,122736228.2 ,122931149.5
				 * ,123125869.2 ,123320391.4 ,123514720.3 ,123708860.5
				 * ,123902816.6 ,124096593.5 ,124290196.3 ,124483630.3
				 * ,124676900.9 ,124870013.8 ,125062974.9 ,125255790.1
				 * ,125448465.7 ,125641008.1 ,125833423.8 ,126025719.5
				 * ,126217902.2 ,126409978.8 ,126601956.7 ,126793843.2
				 * ,126985645.7 ,127177372 ,127369029.8 ,127560627.2
				 * ,127752172.4 ,127943673.7 ,128135140.1 ,128326581
				 * ,128518007.3 ,128709432.2 ,128900873.4 ,129092357.8
				 * ,129283930.2 ,129475670.7 ,129667729.8 ,129860397.5
				 * ,130054240 ,130250372.6 ,130450999.3 ,130660487.3
				 * ,130887500.6 ,131149253.2 ,131480016.2 ,131948267.4
				 * ,132691797 ,133991705.3 ,136437230.3 ,141331451.4
				 * ,151878301.7 ,177845396 ,267988228.7
				 */

				0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
				19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
				45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
				71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
				97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
				118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
				139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
				160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
				181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
				202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222,
				223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
				244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
				265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
				286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306,
				307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327,
				328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
				349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
				370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
				391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
				412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432,
				433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453,
				454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474,
				475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495,
				496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516,
				517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537,
				538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558,
				559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
				580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600,
				601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621,
				622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642,
				643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663,
				664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684,
				685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
				706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
				727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
				748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
				769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
				790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
				811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
				832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
				853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
				874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
				895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
				916, 917, 918, 919

		};

		@Override
		public double f(int k) {
			if (d.length > k)
				return d[k];
			return 0;
		}

		
	};

	private static Graph graph;

	public static void main2(String[] args) throws IOException {
		double[] r_loss = new double[] { 0, 0.37009, 0.45798, 0.10600, 0.03310, 0.00214, 0.00819, 0.00384, 0.00000,
				0.00386, 0.00000, 0.00000, 0.00380, 0.00173, 0.00000, 0.00000, 0.00000, 0.00000, 0.00093, 0.00047,
				0.00788 };
		//GenNPPS_RemArcs genBA = new GenNPPS_RemArcs(MainComplexAtachment.vertexFactory,
			//	MainComplexAtachment.edgeFactory, r_loss, pa_losses, 1);
		//Graph graph = genBA.evolve(200000, MainComplexAtachment.seed_graph());
		System.out.println("V:" + graph.getVertexCount());
		System.out.println("E:" + graph.getEdgeCount());
		int k_max = MainCalibCoefClastPA.getMaxDegree(graph);
		System.out.println("max_k=" + k_max);
		int[] degrees = MainCalibCoefClastPA.getNodesDegrees(graph, k_max + 1);
		for (int i = 0; i < degrees.length; i++) {
			System.out.println(degrees[i]);

		}
		// double e= 316170067;

		int[][] mass = MainCalibCoefClastPA.getQMatrix(graph, 40);
		File logFile = new File("losses//zador_new.txt");
		FileWriter writeFile = new FileWriter(logFile);
		int count = 0;
		for (int i = 1; i < mass.length; i++) {
			for (int j = 1; j < mass.length; j++) {
				writeFile.write(String.format("%.8f", mass[i][j] / 2. / (double) graph.getEdgeCount()) + " ");
			}
			writeFile.write("\n");
		}
		writeFile.close();
		// MainComplexAtachment.saveGraph(graph, "LPA.net");

	}

	public static void main(String[] args) throws IOException {
		double[] r = new double[] { 0,
				0,
				0,
				1

		};
		GenLossEdgesPA genBA = new GenLossEdgesPA(MainCalibCoefClastPA.vertexFactory,
				MainCalibCoefClastPA.edgeFactory, r, pa, 2);
		Graph graph = genBA.evolve(10000, MainCalibCoefClastPA.seed_graph());

		// GenNonIntBA genBA = new
		// GenNonIntBA(MainComplexAtachment.vertexFactory,
		// MainComplexAtachment.edgeFactory, r, pa);
		// Graph graph = genBA.evolve(10000, MainComplexAtachment.seed_graph());

		System.out.println("V:" + graph.getVertexCount());
		System.out.println("E:" + graph.getEdgeCount());
		int k_max = MainCalibCoefClastPA.getMaxDegree(graph);
		System.out.println("max_k=" + k_max);
		int[] degrees = MainCalibCoefClastPA.getNodesDegrees(graph, k_max + 1);
		for (int i = 0; i < degrees.length; i++) {
			System.out.println(degrees[i]);

		}
		{
			int[][] mass = MainCalibCoefClastPA.getQMatrix(graph, 12);
			File logFile = new File("losses//npps.txt");
			FileWriter writeFile = new FileWriter(logFile);
			for (int i = 1; i < mass.length; i++) {
				for (int j = 1; j < mass.length; j++) {
					writeFile.write(String.format("%.8f", mass[i][j] / (double) graph.getEdgeCount()) + " ");
				}
				writeFile.write("\n");
			}
			writeFile.close();
		}
		{
			int[][] mass2 = getOutEdges(graph,k_max, 4);

			File logFile2 = new File("losses//npps_out.txt");
			FileWriter writeFile2 = new FileWriter(logFile2);
			for (int i = 0; i < mass2.length; i++) {
				for (int j = 0; j < mass2[0].length; j++) {
					//writeFile2.write(mass2[i][j] + " ");
					writeFile2.write(String.format("%.8f", mass2[i][j] / (double) graph.getVertexCount()) + " ");
					//writeFile.write(String.format("%.8f", mass[i][j] / (double) graph.getEdgeCount()) + " ");

				}
				writeFile2.write("\n");
			}
			writeFile2.close();
		}
		/*{
			int[][] mass2 = getOutTunnelMatrix(graph, 12);

			File logFile2 = new File("losses//npps_nodes_out.txt");
			FileWriter writeFile2 = new FileWriter(logFile2);
			for (int i = 1; i < mass2.length; i++) {
				for (int j = 1; j < mass2.length; j++) {
					writeFile2.write(mass2[i][j] + " ");
				}
				writeFile2.write("\n");
			}
			writeFile2.close();
		}
		{

			int[][] mass2 = getInTunnelMatrix(graph, 12);
			File logFile2 = new File("losses//npps_nodes_in.txt");
			FileWriter writeFile2 = new FileWriter(logFile2);
			for (int i = 1; i < mass2.length; i++) {
				for (int j = 1; j < mass2.length; j++) {
					writeFile2.write(mass2[i][j] + " ");
				}
				writeFile2.write("\n");
			}
			writeFile2.close();

		}*/
		// MainComplexAtachment.saveGraph(graph, "losses//PA.net");

	}

	private static int[][] getOutEdges(Graph graph,int size, int i) {
		int[][] ret = new int[size][i];
		Collection<Object> list = graph.getVertices();
		for (Object node : list) {
			Collection<Object> outE = graph.getOutEdges(node);
			int degree_n = graph.degree(node);
			if (outE.size()<=i && degree_n < size) {
			ret[degree_n][outE.size()]=ret[degree_n][outE.size()]+1;
			}
		}
		return ret;
	}

	private static int[][] getInTunnelMatrix(Graph graph, int size) {
		int[][] ret = new int[size][size];

		Collection<Object> list = graph.getVertices();
		for (Object node : list) {
			Collection<Object> inE = graph.getInEdges(node);
			Object n2 = node;
			Set<Integer> set = new HashSet();
			int degree_n2 = graph.degree(n2);

			for (Object arc : inE) {
				Object n1 = graph.getSource(arc);

				int degree_n1 = graph.degree(n1);
				if (degree_n1 < size && degree_n2 < size && !set.contains(degree_n1)) {
					ret[degree_n1][degree_n2] = ret[degree_n1][degree_n2] + 1;

				}
				set.add(degree_n1);

			}

		}
		return ret;
	}

	private static int[][] getOutTunnelMatrix(Graph graph, int size) {
		int[][] ret = new int[size][size];

		Collection<Object> list = graph.getVertices();
		for (Object node : list) {
			Object n1 = node;
			Collection<Object> outE = graph.getOutEdges(node);
			Set<Integer> set = new HashSet();
			int degree_n1 = graph.degree(n1);

			for (Object arc : outE) {
				Object n2 = graph.getDest(arc);

				int degree_n2 = graph.degree(n2);
				if (degree_n1 < size && degree_n2 < size && !set.contains(degree_n2)) {
					ret[degree_n1][degree_n2] = ret[degree_n1][degree_n2] + 1;
				}
				set.add(degree_n2);
			}

		}
		return ret;
	}
}
